const axios = require("axios");
const fs = require("fs");
const path = require("path");
const { exec } = require("child_process");
const FormData = require("form-data");
const { format } = require("cassidy-styler");
const WebSocket = require("ws");
function design(title, content) {
    return format({
        title,
        titleFont: "bold",
        contentFont: "none",
        titlePattern: "„Äê NASH „Äë{word} {emojis}",
        content,
    });
}

const smartCooldowns = new Map();

const activeSessions = new Map();
const lastSentCache = new Map();
const PH_TIMEZONE = "Asia/Manila";

function pad(n) {
    return n < 10 ? "0" + n : n;
}

function getPHTime() {
    return new Date(new Date().toLocaleString("en-US", { timeZone: PH_TIMEZONE }));
}

function getCountdown(target) {
    const now = getPHTime();
    const msLeft = target - now;
    if (msLeft <= 0) return "00h 00m 00s";
    const h = Math.floor(msLeft / 3.6e6);
    const m = Math.floor((msLeft % 3.6e6) / 6e4);
    const s = Math.floor((msLeft % 6e4) / 1000);
    return `${pad(h)}h ${pad(m)}m ${pad(s)}s`;
}

function getNextRestocks() {
    const now = getPHTime();
    const timers = {};

    const nextEgg = new Date(now);
    nextEgg.setMinutes(now.getMinutes() < 30 ? 30 : 0);
    if (now.getMinutes() >= 30) nextEgg.setHours(now.getHours() + 1);
    nextEgg.setSeconds(0, 0);
    timers.egg = getCountdown(nextEgg);

    const next5 = new Date(now);
    const nextM = Math.ceil((now.getMinutes() + (now.getSeconds() > 0 ? 1 : 0)) / 5) * 5;
    next5.setMinutes(nextM === 60 ? 0 : nextM, 0, 0);
    if (nextM === 60) next5.setHours(now.getHours() + 1);
    timers.gear = timers.seed = getCountdown(next5);

    const nextSummerEvent = new Date(now);
    nextSummerEvent.setMinutes(0, 0, 0); 
    if (now.getMinutes() > 0 || now.getSeconds() > 0 || now.getMilliseconds() > 0) {
        nextSummerEvent.setHours(nextSummerEvent.getHours() + 1); 
    }
    timers.summerEvent = getCountdown(nextSummerEvent);

    const next7 = new Date(now);
    const totalHours = now.getHours() + now.getMinutes() / 60 + now.getSeconds() / 3600;
    const next7h = Math.ceil(totalHours / 7) * 7;
    next7.setHours(next7h, 0, 0, 0);
    timers.cosmetics = getCountdown(next7);

    return timers;
}

function formatValue(val) {
    if (val >= 1_000_000) return `x${(val / 1_000_000).toFixed(1)}M`;
    if (val >= 1_000) return `x${(val / 1_000).toFixed(1)}K`;
    return `x${val}`;
}

function addEmoji(name) {
    const emojis = {
        "Common Egg": "ü•ö", "Uncommon Egg": "üê£", "Rare Egg": "üç≥", "Legendary Egg": "ü™∫", "Mythical Egg": "üîÆ",
        "Bug Egg": "ü™≤", "Common Summer Egg": "ü•ö", "Rare Summer Egg": "üç≥", "Paradise Egg": "üîÆ", "Cleaning Spray": "üß¥", "Friendship Pot": "ü™¥", "Watering Can": "üöø", "Trowel": "üõ†Ô∏è",
        "Recall Wrench": "üîß", "Basic Sprinkler": "üíß", "Advanced Sprinkler": "üí¶", "Godly Sprinkler": "‚õ≤",
        "Lightning Rod": "‚ö°", "Master Sprinkler": "üåä", "Favorite Tool": "‚ù§Ô∏è", "Harvest Tool": "üåæ", "Carrot": "ü•ï",
        "Strawberry": "üçì", "Blueberry": "ü´ê", "Cauliflower": "üå∑", "Tomato": "üçÖ", "Green Apple": "üçè", "Avocado": "ü•ë",
        "Watermelon": "üçâ", "Banana": "üçå", "Pineapple": "üçç", "Bell Pepper": "üå∂Ô∏è", "Prickly Pear": "üçê", "Loquat": "üçí",    
        "Kiwi": "ü•ù", "Feijoa": "üçà", "Sugar Apple": "üçè"
    };
    return `${emojis[name] || ""} ${name}`;
}

module.exports = {
    name: "smart",
    description: "Smart command detection without prefixes",
    nashPrefix: false,
    version: "1.0.0",
    cooldowns: 5,
    execute: async (api, event, args, prefix) => {
        const { threadID, messageID, senderID, body } = event;
        const message = body.toLowerCase().trim();

        const configPath = path.join(__dirname, '../../config.json');
        const config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
        const isAdmin = senderID === config.adminUID;

        const userId = senderID;
        const cooldownTime = 5000; 
        const now = Date.now();

        if (smartCooldowns.has(userId)) {
            const expirationTime = smartCooldowns.get(userId);
            if (now < expirationTime) {
                const timeLeft = 5; 
                return api.sendMessage(`‚è∞ Please wait ${timeLeft} seconds before using smart commands again.`, threadID, messageID);
            }
        }

        smartCooldowns.set(userId, now + cooldownTime);
        setTimeout(() => smartCooldowns.delete(userId), cooldownTime);

        if (isGagStockRequest(message)) {
            return handleGagStock(api, event, body, threadID, messageID);
        }

        if (isDownloadRequest(message, body)) {
            return handleDownload(api, event, body, threadID, messageID);
        }

        if (isTikTokSearch(message)) {
            return handleTikTokSearch(api, event, body, threadID, messageID);
        }

        if (isContactRequest(message)) {
            return handleContact(api, threadID, messageID);
        }



        if (isAriaRequest(message)) {
            return handleAria(api, event, body, threadID, messageID);
        }

        if (isRulesQuery(message)) {
            return handleRules(api, threadID, messageID);
        }

        if (isVideoRequest(message)) {
            return handleShoti(api, threadID, messageID);
        }

        if (isUIDRequest(message)) {
            return handleUID(api, event, args);
        }

        if (isUptimeRequest(message)) {
            return handleUptime(api, threadID, messageID);
        }

        if (isNotificationRequest(message)) {
            return handleSendNotification(api, event, args, threadID, messageID);
        }

        if (isHelpRequest(message)) {
            return handleHelp(api, threadID, messageID, prefix);
        }

        if (isCommandListRequest(message)) {
            return handleCommandList(api, threadID, messageID, prefix);
        }

        if (isPrefixRequest(message)) {
            return handlePrefix(api, threadID, prefix);
        }

        if (isOutRequest(message)) {
            return handleOut(api, event, threadID, messageID, isAdmin);
        }

        if (isAdmin) {
            if (isAddUserRequest(message)) {
                return handleAddUser(api, event, args, threadID, messageID);
            }

            if (isChangeAdminRequest(message)) {
                return handleChangeAdmin(api, event, args, threadID, messageID);
            }

            if (isShellCommand(message)) {
                return handleShell(api, event, args, threadID, messageID);
            }

            if (isEvalCommand(message)) {
                return handleEval(api, event, args, threadID, messageID);
            }
        }

        if (isListBoxRequest(message)) {
            return handleListBox(api, threadID, messageID);
        }

        if (message.includes('women') || message.includes('babae')) {
            return handleWomen(api, threadID, messageID);
        }

        if (isAIQuery(message)) {
            return handleAIQuery(api, event, body, threadID, messageID);
        }
    }
};

function translateAIKeywords() {
    const englishKeywords = {
        specificAi: [
            'explain', 'tell me about', 'what is', 'how does', 'why does', 'how to',
            'define', 'meaning of', 'calculate', 'solve', 'create', 'write', 'make',
            'generate', 'gpt', 'ai', 'chatgpt', 'openai', 'assistant', 'think',
            'analyze', 'compare', 'describe', 'summarize', 'translate', 'convert',
            'recommend', 'suggest', 'help me', 'can you', 'could you', 'would you',
            'please', 'teach me', 'show me', 'find', 'search', 'look up',
            'algorithm', 'code', 'programming', 'debug', 'error', 'fix',
            'review', 'optimize', 'improve', 'best practice', 'tutorial',
            'example', 'sample', 'demo', 'illustration', 'guide'
        ],
        questionWords: ['what', 'how', 'why', 'when', 'where', 'who', 'which', 'whose'],
        questionPhrases: ['can you', 'could you', 'would you', 'do you', 'are you', 'is it', 'will you'],
        techKeywords: ['function', 'variable', 'array', 'object', 'string', 'number', 'boolean', 'loop', 'condition']
    };

    const translations = {

        tl: {
            specificAi: [
                'ipaliwanag', 'sabihin mo sa akin tungkol sa', 'ano ang', 'paano ginagawa', 'bakit ginagawa', 'paano',
                'tukuyin', 'kahulugan ng', 'kalkulahin', 'lutasin', 'lumikha', 'sumulat', 'gumawa',
                'lumikha', 'gpt', 'ai', 'chatgpt', 'openai', 'katulong', 'mag-isip',
                'suriin', 'ihambing', 'ilarawan', 'buuin', 'isalin', 'baguhin',
                'irekomenda', 'imungkahi', 'tulungan mo ako', 'maaari ka ba', 'pwede ka ba', 'gusto mo ba',
                'pakisuyo', 'turuan mo ako', 'ipakita mo sa akin', 'hanapin', 'maghanap', 'tingnan',
                'algorithm', 'code', 'programming', 'debug', 'error', 'ayusin',
                'suriin', 'i-optimize', 'pahusayin', 'best practice', 'tutorial',
                'halimbawa', 'sample', 'demo', 'ilustrasyon', 'gabay'
            ],
            questionWords: ['ano', 'paano', 'bakit', 'kailan', 'saan', 'sino', 'alin', 'kanino'],
            questionPhrases: ['maaari ka ba', 'pwede ka ba', 'gusto mo ba', 'ginagawa mo ba', 'ikaw ba ay', 'ito ba ay', 'gagawin mo ba'],
            techKeywords: ['function', 'variable', 'array', 'object', 'string', 'numero', 'boolean', 'loop', 'kondisyon']
        },

        ceb: {
            specificAi: [
                'ipasabot', 'sultihi ko mahitungod sa', 'unsa ang', 'giunsa pagbuhat', 'ngano gibuhat', 'giunsa',
                'ilhan', 'kahulugan sa', 'kuwentaha', 'sulbara', 'himoa', 'isulat', 'buhata',
                'himoa', 'gpt', 'ai', 'chatgpt', 'openai', 'katabang', 'maghunahuna',
                'susiha', 'itandi', 'ihulagway', 'ihiusa', 'hubara', 'usba',
                'irekomenda', 'isugyot', 'tabanga ko', 'mahimo ka ba', 'pwede ka ba', 'gusto ka ba',
                'palihog', 'tudloi ko', 'ipakita nako', 'pangita', 'mangita', 'tan-awa',
                'algorithm', 'code', 'programming', 'debug', 'error', 'ayoha',
                'susiha', 'i-optimize', 'pauswaga', 'maayong pamaagi', 'tutorial',
                'pananglitan', 'sample', 'demo', 'ilustrasyon', 'giya'
            ],
            questionWords: ['unsa', 'giunsa', 'ngano', 'kanus-a', 'asa', 'kinsa', 'hain', 'kang kinsa'],
            questionPhrases: ['mahimo ka ba', 'pwede ka ba', 'gusto ka ba', 'gibuhat nimo ba', 'ikaw ba', 'kini ba', 'buhaton nimo ba'],
            techKeywords: ['function', 'variable', 'array', 'object', 'string', 'numero', 'boolean', 'loop', 'kondisyon']
        },

        bn: {
            specificAi: [
                '‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡¶≤‡ßÅ‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá', '‡¶ï‡¶ø', '‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡ßá', '‡¶ï‡ßá‡¶® ‡¶ï‡¶∞‡ßá', '‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá',
                '‡¶∏‡¶Ç‡¶ú‡ßç‡¶û‡¶æ‡¶Ø‡¶º‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶Ö‡¶∞‡ßç‡¶•', '‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®', '‡¶ï‡¶∞‡ßÅ‡¶®',
                '‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®', 'gpt', 'ai', 'chatgpt', 'openai', '‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï', '‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®',
                '‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶§‡ßÅ‡¶≤‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
                '‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡¶ø‡¶®', '‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®', '‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶™‡¶æ‡¶∞‡ßá‡¶®', '‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶ö‡¶æ‡¶®',
                '‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá', '‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶∂‡ßá‡¶ñ‡¶æ‡¶®', '‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®', '‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®', '‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®',
                '‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶ó‡¶∞‡¶ø‡¶¶‡¶Æ', '‡¶ï‡ßã‡¶°', '‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶ø‡¶Ç', '‡¶°‡¶ø‡¶¨‡¶æ‡¶ó', '‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø', '‡¶†‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',
                '‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶Ö‡¶™‡ßç‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®', '‡¶≠‡¶æ‡¶≤ ‡¶Ö‡¶®‡ßÅ‡¶∂‡ßÄ‡¶≤‡¶®', '‡¶ü‡¶ø‡¶â‡¶ü‡ßã‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤',
                '‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£', '‡¶®‡¶Æ‡ßÅ‡¶®‡¶æ', '‡¶°‡ßá‡¶Æ‡ßã', '‡¶ö‡¶ø‡¶§‡ßç‡¶∞', '‡¶ó‡¶æ‡¶á‡¶°'
            ],
            questionWords: ['‡¶ï‡¶ø', '‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá', '‡¶ï‡ßá‡¶®', '‡¶ï‡¶ñ‡¶®', '‡¶ï‡ßã‡¶•‡¶æ‡¶Ø‡¶º', '‡¶ï‡ßá', '‡¶ï‡ßã‡¶®‡¶ü‡¶ø', '‡¶ï‡¶æ‡¶∞'],
            questionPhrases: ['‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®', '‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶™‡¶æ‡¶∞‡ßá‡¶®', '‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶ö‡¶æ‡¶®', '‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶ï‡¶∞‡ßá‡¶®', '‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø', '‡¶è‡¶ü‡¶ø ‡¶ï‡¶ø', '‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡¶®'],
            techKeywords: ['‡¶´‡¶æ‡¶Ç‡¶∂‡¶®', '‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤', '‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá', '‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü', '‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç', '‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ', '‡¶¨‡ßÅ‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶®', '‡¶≤‡ßÅ‡¶™', '‡¶∂‡¶∞‡ßç‡¶§']
        },

        id: {
            specificAi: [
                'jelaskan', 'ceritakan tentang', 'apa itu', 'bagaimana cara', 'mengapa', 'cara',
                'definisikan', 'arti dari', 'hitung', 'selesaikan', 'buat', 'tulis', 'buat',
                'hasilkan', 'gpt', 'ai', 'chatgpt', 'openai', 'asisten', 'pikir',
                'analisis', 'bandingkan', 'deskripsikan', 'ringkas', 'terjemahkan', 'konversi',
                'rekomendasikan', 'sarankan', 'bantu saya', 'bisakah kamu', 'dapatkah kamu', 'maukah kamu',
                'tolong', 'ajari saya', 'tunjukkan', 'cari', 'telusuri', 'lihat',
                'algoritma', 'kode', 'pemrograman', 'debug', 'error', 'perbaiki',
                'tinjau', 'optimalisasi', 'tingkatkan', 'praktik terbaik', 'tutorial',
                'contoh', 'sampel', 'demo', 'ilustrasi', 'panduan'
            ],
            questionWords: ['apa', 'bagaimana', 'mengapa', 'kapan', 'dimana', 'siapa', 'yang mana', 'milik siapa'],
            questionPhrases: ['bisakah kamu', 'dapatkah kamu', 'maukah kamu', 'apakah kamu', 'apakah kamu', 'apakah ini', 'akankah kamu'],
            techKeywords: ['fungsi', 'variabel', 'array', 'objek', 'string', 'angka', 'boolean', 'loop', 'kondisi']
        },

        fr: {
            specificAi: [
                'expliquer', 'parlez-moi de', 'qu\'est-ce que', 'comment fait', 'pourquoi fait', 'comment',
                'd√©finir', 'signification de', 'calculer', 'r√©soudre', 'cr√©er', '√©crire', 'faire',
                'g√©n√©rer', 'gpt', 'ai', 'chatgpt', 'openai', 'assistant', 'penser',
                'analyser', 'comparer', 'd√©crire', 'r√©sumer', 'traduire', 'convertir',
                'recommander', 'sugg√©rer', 'aidez-moi', 'pouvez-vous', 'pourriez-vous', 'voudriez-vous',
                's\'il vous pla√Æt', 'enseignez-moi', 'montrez-moi', 'trouver', 'chercher', 'regarder',
                'algorithme', 'code', 'programmation', 'd√©boguer', 'erreur', 'corriger',
                'examiner', 'optimiser', 'am√©liorer', 'bonne pratique', 'tutoriel',
                'exemple', '√©chantillon', 'd√©mo', 'illustration', 'guide'
            ],
            questionWords: ['quoi', 'comment', 'pourquoi', 'quand', 'o√π', 'qui', 'lequel', '√† qui'],
            questionPhrases: ['pouvez-vous', 'pourriez-vous', 'voudriez-vous', 'faites-vous', '√™tes-vous', 'est-ce', 'allez-vous'],
            techKeywords: ['fonction', 'variable', 'tableau', 'objet', 'cha√Æne', 'nombre', 'bool√©en', 'boucle', 'condition']
        },

        ru: {
            specificAi: [
                '–æ–±—ä—è—Å–Ω–∏—Ç—å', '—Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫–∞–∫ –¥–µ–ª–∞–µ—Ç', '–ø–æ—á–µ–º—É –¥–µ–ª–∞–µ—Ç', '–∫–∞–∫',
                '–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å', '–∑–Ω–∞—á–µ–Ω–∏–µ', '–≤—ã—á–∏—Å–ª–∏—Ç—å', '—Ä–µ—à–∏—Ç—å', '—Å–æ–∑–¥–∞—Ç—å', '–Ω–∞–ø–∏—Å–∞—Ç—å', '—Å–¥–µ–ª–∞—Ç—å',
                '–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', 'gpt', 'ai', 'chatgpt', 'openai', '–ø–æ–º–æ—â–Ω–∏–∫', '–¥—É–º–∞—Ç—å',
                '–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', '—Å—Ä–∞–≤–Ω–∏—Ç—å', '–æ–ø–∏—Å–∞—Ç—å', '—Ä–µ–∑—é–º–∏—Ä–æ–≤–∞—Ç—å', '–ø–µ—Ä–µ–≤–µ—Å—Ç–∏', '–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å',
                '—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å', '–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å', '–ø–æ–º–æ–≥–∏ –º–Ω–µ', '–º–æ–∂–µ—à—å –ª–∏ —Ç—ã', '–º–æ–≥ –±—ã —Ç—ã', '—Ö–æ—Ç–µ–ª –±—ã —Ç—ã',
                '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–Ω–∞—É—á–∏ –º–µ–Ω—è', '–ø–æ–∫–∞–∂–∏ –º–Ω–µ', '–Ω–∞–π—Ç–∏', '–∏—Å–∫–∞—Ç—å', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
                '–∞–ª–≥–æ—Ä–∏—Ç–º', '–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–æ—Ç–ª–∞–¥–∫–∞', '–æ—à–∏–±–∫–∞', '–∏—Å–ø—Ä–∞–≤–∏—Ç—å',
                '–æ–±–∑–æ—Ä', '–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å', '—É–ª—É—á—à–∏—Ç—å', '–ª—É—á—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞', '—É—á–µ–±–Ω–∏–∫',
                '–ø—Ä–∏–º–µ—Ä', '–æ–±—Ä–∞–∑–µ—Ü', '–¥–µ–º–æ', '–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ'
            ],
            questionWords: ['—á—Ç–æ', '–∫–∞–∫', '–ø–æ—á–µ–º—É', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–∫—Ç–æ', '–∫–æ—Ç–æ—Ä—ã–π', '—á–µ–π'],
            questionPhrases: ['–º–æ–∂–µ—à—å –ª–∏ —Ç—ã', '–º–æ–≥ –±—ã —Ç—ã', '—Ö–æ—Ç–µ–ª –±—ã —Ç—ã', '–¥–µ–ª–∞–µ—à—å –ª–∏ —Ç—ã', '—Ç—ã', '—ç—Ç–æ', '–±—É–¥–µ—à—å –ª–∏ —Ç—ã'],
            techKeywords: ['—Ñ—É–Ω–∫—Ü–∏—è', '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '–º–∞—Å—Å–∏–≤', '–æ–±—ä–µ–∫—Ç', '—Å—Ç—Ä–æ–∫–∞', '—á–∏—Å–ª–æ', '–ª–æ–≥–∏—á–µ—Å–∫–∏–π', '—Ü–∏–∫–ª', '—É—Å–ª–æ–≤–∏–µ']
        },
      // Chinese (Simplified)
        zh: {
            specificAi: [
                'Ëß£Èáä', 'ÂëäËØâÊàëÂÖ≥‰∫é', '‰ªÄ‰πàÊòØ', 'Â¶Ç‰ΩïÂÅö', '‰∏∫‰ªÄ‰πàÂÅö', 'Â¶Ç‰Ωï',
                'ÂÆö‰πâ', 'ÊÑèÊÄù', 'ËÆ°ÁÆó', 'Ëß£ÂÜ≥', 'ÂàõÂª∫', 'ÂÜô', 'ÂÅö',
                'ÁîüÊàê', 'gpt', 'ai', 'chatgpt', 'openai', 'Âä©Êâã', 'ÊÄùËÄÉ',
                'ÂàÜÊûê', 'ÊØîËæÉ', 'ÊèèËø∞', 'ÊÄªÁªì', 'ÁøªËØë', 'ËΩ¨Êç¢',
                'Êé®Ëçê', 'Âª∫ËÆÆ', 'Â∏ÆÂä©Êàë', '‰Ω†ËÉΩ', '‰Ω†ÂèØ‰ª•', '‰Ω†ÊÑøÊÑè',
                'ËØ∑', 'ÊïôÊàë', 'ÁªôÊàëÁúã', 'ÊâæÂà∞', 'ÊêúÁ¥¢', 'Êü•Áúã',
                'ÁÆóÊ≥ï', '‰ª£Á†Å', 'ÁºñÁ®ã', 'Ë∞ÉËØï', 'ÈîôËØØ', '‰øÆÂ§ç',
                'ÂÆ°Êü•', '‰ºòÂåñ', 'ÊîπËøõ', 'ÊúÄ‰Ω≥ÂÆûË∑µ', 'ÊïôÁ®ã',
                '‰æãÂ≠ê', 'Ê†∑Êú¨', 'ÊºîÁ§∫', 'ÊèíÂõæ', 'ÊåáÂçó'
            ],
            questionWords: ['‰ªÄ‰πà', 'Â¶Ç‰Ωï', '‰∏∫‰ªÄ‰πà', '‰ΩïÊó∂', 'Âì™Èáå', 'Ë∞Å', 'Âì™‰∏™', 'Ë∞ÅÁöÑ'],
            questionPhrases: ['‰Ω†ËÉΩ', '‰Ω†ÂèØ‰ª•', '‰Ω†ÊÑøÊÑè', '‰Ω†ÂÅö', '‰Ω†ÊòØ', 'ËøôÊòØ', '‰Ω†‰ºö'],
            techKeywords: ['ÂáΩÊï∞', 'ÂèòÈáè', 'Êï∞ÁªÑ', 'ÂØπË±°', 'Â≠óÁ¨¶‰∏≤', 'Êï∞Â≠ó', 'Â∏ÉÂ∞î', 'Âæ™ÁéØ', 'Êù°‰ª∂']
        }
    };

    const allKeywords = {
        specificAi: [...englishKeywords.specificAi],
        questionWords: [...englishKeywords.questionWords],
        questionPhrases: [...englishKeywords.questionPhrases],
        techKeywords: [...englishKeywords.techKeywords]
    };

    Object.values(translations).forEach(lang => {
        allKeywords.specificAi.push(...lang.specificAi);
        allKeywords.questionWords.push(...lang.questionWords);
        allKeywords.questionPhrases.push(...lang.questionPhrases);
        allKeywords.techKeywords.push(...lang.techKeywords);
    });

    return allKeywords;
}

function isAIQuery(message) {
    const keywords = translateAIKeywords();

    if (keywords.specificAi.some(keyword => message.includes(keyword))) {
        return true;
    }

    if (message.endsWith('?') || keywords.questionWords.some(word => message.startsWith(word + ' '))) {
        const excludePatterns = [
            'what commands', 'what cmd', 'what are the rules', 'what is your prefix',
            'what\'s my uid', 'what\'s my id', 'how long', 'when did', 'what commands',
            'what video', 'what movie', 'what song', 'when restock', 'what time',
            'how to download', 'gag stock', 'stock', 'restock', 'ano ang commands',
            'unsa ang commands', '‡¶ï‡¶ø ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°', 'apa perintah', 'quelles commandes',
            '–∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã', '‰ªÄ‰πàÂëΩ‰ª§'
        ];

        if (!excludePatterns.some(pattern => message.includes(pattern))) {
            return true;
        }
    }

    if (keywords.questionPhrases.some(phrase => message.includes(phrase))) {
        return true;
    }

    if (/[\d\+\-\*\/\(\)\=\^\%]/.test(message) && message.length > 3) {
        return true;
    }

    if (keywords.techKeywords.some(keyword => message.includes(keyword))) {
        return true;
    }

    return false;
}

function isGagStockRequest(message) {
    const gagKeywords = [
        'gag stock', 'stock gag', 'gagstock', 'grow a garden stock',
        'restock timer', 'stock timer', 'garden stock', 'stock', 'gag', 'grow a garden'
    ];

    return gagKeywords.some(keyword => message.includes(keyword));
}

function isContactRequest(message) {
    return message.includes('contact') || message.includes('owner info') || 
           message.includes('contacts') || message.includes('info') || 
           message.includes('developer') || message.includes('creator info');
}



function isAriaRequest(message) {
    return message.includes('aria') || message.includes('alternative ai');
}

function isRulesQuery(message) {
    return message.includes('rules') || message.includes('regulation') ||
           message.includes('rule') || message.includes('give the rules') ||
           message.includes('guideline') || message.includes('what are the rules');
}

function isVideoRequest(message) {
    const videoKeywords = ['video', 'shoti', 'girl', 'tiktok video', 'send video', 'show video', 'random shoti', 'shoti random'];
    return videoKeywords.some(keyword => message.includes(keyword));
}

function isUIDRequest(message) {
    return message.includes('uid') || message.includes('user id') || 
           message.includes('my id') || message.includes('get id');
}

function isUptimeRequest(message) {
    return message.includes('uptime') || message.includes('how long') ||
           message.includes('upt') || message.includes('run time') ||
           message.includes('running time') || message.includes('bot uptime');
}

function isDownloadRequest(message, fullBody) {
    return (message.includes('download') || message.includes('dl')) && 
           (fullBody.includes('facebook.com') || fullBody.includes('fb.watch'));
}

function isTikTokSearch(message) {
    return message.includes('tiktok') && !message.includes('download') && 
           !message.includes('facebook.com');
}

function isNotificationRequest(message) {
    return message.includes('notification') || message.includes('notify') ||
           message.includes('send noti') || message.includes('broadcast');
}

function isHelpRequest(message) {
    return message.includes('help') || message.includes('what can you do') ||
           message.includes('what are your features') || message.includes('smart');
}

function isCommandListRequest(message) {
    return message.includes('command') || message.includes('cmd') || 
           message.includes('list command') || message.includes('show command') ||
           message.includes('list cmd') || message.includes('show cmd') ||
           message.includes('available command') || message.includes('what commands');
}

function isPrefixRequest(message) {
    return message.includes('prefix') || message.includes('what is your prefix');
}

function isOutRequest(message) {
    return message.includes('leave') || message.includes('out') || 
           message.includes('exit') || message.includes('goodbye');
}

function isAddUserRequest(message) {
    return message.includes('add user') || message.includes('adduser');
}

function isChangeAdminRequest(message) {
    return message.includes('change admin') || message.includes('new admin') ||
           message.includes('transfer admin') || message.includes('changeadmin');
}

function isShellCommand(message) {
    return message.startsWith('shell ') || message.startsWith('run ');
}

function isEvalCommand(message) {
    return message.startsWith('eval ') || message.startsWith('execute ');
}

function isListBoxRequest(message) {
    return message.includes('list') && (message.includes('group') || message.includes('box'));
}

async function handleAIQuery(api, event, body, threadID, messageID) {
    const prompt = body.trim();

    api.sendMessage("Processing...", threadID, async (err, info) => {
        if (err) return;

        try {
            const url = `${global.NashBot.JOSHUA}api/gpt4o-latest?ask=${encodeURIComponent(prompt)}&uid=1&imageUrl=&apikey=609efa09-3ed5-4132-8d03-d6f8ca11b527`;
            const response = await axios.get(url);
            const reply = response.data.response;
            api.editMessage(reply, info.messageID);
        } catch (error) {
            api.editMessage("‚ùå Failed to get AI response.", info.messageID);
        }
    }, messageID);
}

function handleContact(api, threadID, messageID) {
    const contactContent = `üë®‚Äçüíª Developer : MAXIMIN SAVI || Thibaut Savi 
üìß Email: Maximinsavi@gmail.com ||Maximinsavi2@gmail.com
üì± Facebook: https://www.facebook.com/MaximinSavi229 || https://www.facebook.com/profile.php?id=61575274803599
üåê Website: Maxchat.wapkizs.com
üíª GitHub: https://github.com/maximinsavi || https://github.com/thibautsavi

üí¨ For support or inquiries, feel free to reach out!`;

    const contactInfo = design("üìû Contact Information", contactContent);
    api.sendMessage(contactInfo, threadID, messageID);
}



async function handleAria(api, event, body, threadID, messageID) {
    const prompt = body.replace(/aria/gi, '').trim();

    if (!prompt) {
        return api.sendMessage("What would you like to ask Aria?", threadID, messageID);
    }

    api.sendMessage("Processing..", threadID, async (err, info) => {
        try {
            const url = `https://api.openai.com/v1/chat/completions`;

            const response = await axios.get(`${global.NashBot.JOSHUA}api/gpt4o-latest?ask=${encodeURIComponent(prompt)}&uid=2&imageUrl=&apikey=609efa09-3ed5-4132-8d03-d6f8ca11b527`);
            const reply = response.data.response;
            api.editMessage(`üé≠ Aria: ${reply}`, info.messageID);
        } catch (error) {
            api.editMessage("‚ùå Aria is currently unavailable.", info.messageID);
        }
    });
}

function handleRules(api, threadID, messageID) {
    const rulesContent = `1. Be respectful: Treat everyone in the group with kindness and respect.
2. No spamming: Avoid sending repetitive or irrelevant messages.
3. Stay on topic: Keep discussions relevant to the group's purpose.
4. No personal information: Do not share personal details of yourself or others without permission.
5. Follow the group's purpose: Ensure your messages contribute to the educational or informational goals of the group.
6. Report issues: If you encounter any issues or have concerns, contact a group admin.`;

    const rules = design("üìã Rules", rulesContent);
    api.sendMessage(rules, threadID, messageID);
}

async function handleShoti(api, threadID, messageID) {
    api.sendMessage("üìπ Getting video for you...", threadID, async (err, info) => {
        if (err) return;

        try {
            const { data } = await axios.post("https://shoti-rho.vercel.app/api/request/f");
            const videoUrl = data.url;
            const username = data.username;
            const nickname = data.nickname;

            const videoPath = path.resolve(__dirname, 'temp', 'shoti.mp4');
            const writer = fs.createWriteStream(videoPath);

            const responseStream = await axios({
                url: videoUrl,
                method: 'GET',
                responseType: 'stream',
            });

            responseStream.data.pipe(writer);

            writer.on('finish', () => {
                api.sendMessage({
                    body: `Username: ${username}\nNickname: ${nickname}`,
                    attachment: fs.createReadStream(videoPath),
                }, threadID, () => {
                    fs.unlinkSync(videoPath);
                    api.editMessage("‚úÖ Video sent!", info.messageID);
                }, messageID);
            });

            writer.on('error', () => {
                api.editMessage("‚ùå Error processing video.", info.messageID);
            });
        } catch (error) {
            api.editMessage("‚ùå Error fetching video.", info.messageID);
        }
    });
}

function handleUID(api, event, args) {
    const { threadID, senderID } = event;
    let id = senderID;

    if (event.type === 'message_reply') {
        id = event.messageReply.senderID;
    }

    if (event.mentions && Object.keys(event.mentions).length > 0) {
        id = Object.keys(event.mentions)[0];
    }

    api.shareContact(id, id, threadID);
}

function handleUptime(api, threadID, messageID) {
    const uptime = process.uptime();
    const hours = Math.floor(uptime / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    const seconds = Math.floor(uptime % 60);

    const message = `‚è∞ Bot Uptime: ${hours}h ${minutes}m ${seconds}s`;
    api.sendMessage(message, threadID, messageID);
}

async function handleDownload(api, event, body, threadID, messageID) {
    const urlMatch = body.match(/(https?:\/\/[^\s]+)/);
    if (!urlMatch) {
        return api.sendMessage("Please provide a valid Facebook video URL.", threadID, messageID);
    }

    const fbUrl = urlMatch[0];

    api.sendMessage("‚è≥ Downloading video...", threadID, async (err, info) => {
        if (err) return;

        try {
            const form = new FormData();
            form.append("k_exp", "1749611486");
            form.append("k_token", "aa26d4a3b2bf844c8af6757179b85c10ab6975dacd30b55ef79d0d695f7ea764");
            form.append("q", fbUrl);
            form.append("lang", "en");
            form.append("web", "fdownloader.net");
            form.append("v", "v2");

            const headers = {
                ...form.getHeaders(),
                "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
                "Accept": "*/*"
            };

            const response = await axios.post("https://v3.fdownloader.net/api/ajaxSearch", form, { headers });

            if (response.data.status !== "ok") {
                throw new Error("Failed to fetch video data");
            }

            const html = response.data.data;
            const downloadLinks = [];

            const mp4Regex = /<a href="(https:\/\/dl\.snapcdn\.app\/download\?token=[^"]+)"[^>]*>Download<\/a>/g;
            let match;
            while ((match = mp4Regex.exec(html)) !== null) {
                const qualityMatch = html.substring(0, match.index).match(/video-quality[^>]*>([^<]+)</);
                if (qualityMatch) {
                    downloadLinks.push({
                        url: match[1],
                        quality: qualityMatch[1].trim()
                    });
                }
            }

            if (downloadLinks.length === 0) {
                throw new Error("No download links found");
            }

            downloadLinks.sort((a, b) => {
                const getQualityNum = (q) => parseInt(q.replace(/\D/g, "")) || 0;
                return getQualityNum(b.quality) - getQualityNum(a.quality);
            });

            const bestQuality = downloadLinks[0];

            const tempDir = path.join(__dirname, 'temp');
            if (!fs.existsSync(tempDir)) {
                fs.mkdirSync(tempDir);
            }

            const videoPath = path.join(tempDir, `fb_video_${Date.now()}.mp4`);
            const writer = fs.createWriteStream(videoPath);

            const videoResponse = await axios({
                method: 'get',
                url: bestQuality.url,
                responseType: 'stream'
            });

            videoResponse.data.pipe(writer);

            await new Promise((resolve, reject) => {
                writer.on('finish', resolve);
                writer.on('error', reject);
            });

            const videoStream = fs.createReadStream(videoPath);
            api.sendMessage({
                attachment: videoStream
            }, threadID, () => {
                fs.unlinkSync(videoPath);
                api.unsendMessage(info.messageID);
            });

        } catch (error) {
            api.editMessage("‚ùå Error downloading video.", info.messageID);
        }
    }, messageID);
}

async function handleTikTokSearch(api, event, body, threadID, messageID) {
    const query = body.replace(/tiktok/gi, '').trim();
    if (!query) {
        return api.sendMessage("What TikTok video would you like me to find?", threadID, messageID);
    }

    api.sendMessage("üîç Searching TikTok...", threadID, async (err, info) => {
        try {
            const res = await axios.get(`https://zen-api.gleeze.com/api/tiktok?query=${encodeURIComponent(query)}`);
            const data = res.data;

            if (!data || !data.no_watermark) {
                throw new Error("No video found.");
            }

            const tempDir = path.join(__dirname, "temp");
            if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir);

            const fileName = `tiktok_${Date.now()}.mp4`;
            const videoPath = path.join(tempDir, fileName);
            const writer = fs.createWriteStream(videoPath);

            const videoStream = await axios({
                method: "GET",
                url: data.no_watermark,
                responseType: "stream",
            });

            videoStream.data.pipe(writer);
            await new Promise((resolve, reject) => {
                writer.on("finish", resolve);
                writer.on("error", reject);
            });

            const attachment = fs.createReadStream(videoPath);
            api.sendMessage({
                body: `üé¨ ${data.title || 'TikTok Video'}`,
                attachment,
            }, threadID, () => {
                fs.unlinkSync(videoPath);
                api.unsendMessage(info.messageID);
            });

        } catch (error) {
            api.editMessage("‚ùå Error finding TikTok video.", info.messageID);
        }
    }, messageID);
}

async function handleSendNotification(api, event, args, threadID, messageID) {
    const message = event.body.replace(/notification|notify|send noti|broadcast/gi, '').trim();

    if (!message) {
        return api.sendMessage("What notification would you like to send?", threadID, messageID);
    }

    try {
        const inbox = await api.getThreadList(100, null, ['INBOX']);
        const groups = inbox.filter(group => group.isSubscribed && group.isGroup);

        let sent = 0;
        for (const group of groups) {
            try {
                await api.sendMessage(`üì¢ Notification: ${message}`, group.threadID);
                sent++;
            } catch (err) {
                console.error(`Failed to send to ${group.threadID}`);
            }
        }

        api.sendMessage(`‚úÖ Notification sent to ${sent} groups.`, threadID, messageID);
    } catch (error) {
        api.sendMessage("‚ùå Failed to send notifications.", threadID, messageID);
    }
}

function handleHelp(api, threadID, messageID, prefix) {
    const helpContent = `----------------------------------

ü§ñ AI & Intelligence
   ‚Ä¢ Ask any question naturally
   ‚Ä¢ Get detailed explanations
   ‚Ä¢ Programming help & debugging
   ‚Ä¢ Math calculations
   ‚Ä¢ Educational content
   ‚Ä¢ General conversation

üéÆ Grow A Garden Tracker
   ‚Ä¢ "gag stock" - Live stock tracking
   ‚Ä¢ "gag stock start" - Begin monitoring
   ‚Ä¢ "gag stock stop" - Stop tracking
   ‚Ä¢ "restock timer" - View timers
   ‚Ä¢ Real-time WebSocket updates

üìπ Media & Entertainment
   ‚Ä¢ "Send me a video" or "shoti"
   ‚Ä¢ "TikTok video about [topic]"
   ‚Ä¢ "Download [Facebook URL]"
   ‚Ä¢ "women/babae" - Special content

üîß Utilities & Tools
   ‚Ä¢ "Get my UID" - User identification
   ‚Ä¢ "List groups" - Group management
   ‚Ä¢ "Send notification [message]"
   ‚Ä¢ "Bot uptime" - System status

üìã Information
   ‚Ä¢ "What are the rules?"
   ‚Ä¢ "Contact info" - Developer details
   ‚Ä¢ "What's your prefix?"
   ‚Ä¢ "Commands" - Full command list

üé≠ AI Alternatives
   ‚Ä¢ "aria [question]" - Alternative AI

üö™ Admin Features
   ‚Ä¢ "leave/out" - Bot exit group
   ‚Ä¢ "add user [UID]" - Add members
   ‚Ä¢ "change admin [UID]" - Transfer admin
   ‚Ä¢ "shell [command]" - Execute commands
   ‚Ä¢ "eval [code]" - Run JavaScript

----------------------------------

üí° Tips:
   ‚Ä¢ No prefixes needed for most features
   ‚Ä¢ Smart detection understands context
   ‚Ä¢ Questions ending with "?" auto-detected
   ‚Ä¢ Use natural language for best results

üí¨ Examples:
   ‚Ä¢ "What's the weather like?"
   ‚Ä¢ "How do I code in Python?"
   ‚Ä¢ "Show me a funny video"
   ‚Ä¢ "Download this Facebook video [URL]"`;

    const helpMessage = design("ü§ñ MAXIMIN - COMPREHENSIVE GUIDE", helpContent);

    const imagePath = './nashbot.png';

    if (fs.existsSync(imagePath)) {
        const attachment = fs.createReadStream(imagePath);
        api.sendMessage({ body: helpMessage, attachment }, threadID);
    } else {
        api.sendMessage(helpMessage, threadID);
    }
}

function handleCommandList(api, threadID, messageID, prefix) {
    const { commands } = global.NashBoT;
    const commandArray = Array.from(commands.values());

    const uniqueCommands = commandArray.filter((cmd, index, self) => 
        index === self.findIndex(c => c.name === cmd.name)
    );

    const traditionalCommands = uniqueCommands.filter(cmd => 
        cmd.nashPrefix !== false && cmd.name !== 'smart'
    );

    let smartContent = `‚ú® ùó¶ùó†ùóîùó•ùóß ùóôùóòùóîùóßùó®ùó•ùóòùó¶ (ùó°ùóº ùó£ùóøùó≤ùó≥ùó∂ùòÖ ùó°ùó≤ùó≤ùó±ùó≤ùó±!)

----------------------------------

ü§ñ AI & Intelligence
   ‚Ä¢ Ask any question naturally
   ‚Ä¢ Programming help & code review
   ‚Ä¢ Math calculations & solving
   ‚Ä¢ Educational explanations
   ‚Ä¢ Text analysis & generation
   ‚Ä¢ Conversation & chat

üéÆ Grow A Garden Tracker
   ‚Ä¢ "gag stock" - Current stock status
   ‚Ä¢ "gag stock start" - Live tracking
   ‚Ä¢ "gag stock stop" - Stop monitoring
   ‚Ä¢ "restock timer" - View all timers
   ‚Ä¢ Real-time WebSocket updates
   ‚Ä¢ Filter specific items

üìπ Media & Entertainment
   ‚Ä¢ "video", "shoti" - Random videos
   ‚Ä¢ "TikTok [search]" - TikTok search
   ‚Ä¢ "Download [Facebook URL]" - FB videos
   ‚Ä¢ "women", "babae" - Special content

üîß Utilities & Tools
   ‚Ä¢ "uid", "my id" - Get user ID
   ‚Ä¢ "list groups" - Group management
   ‚Ä¢ "notification [msg]" - Broadcast
   ‚Ä¢ "uptime" - Bot runtime status

üìã Information & Help
   ‚Ä¢ "rules" - Server guidelines
   ‚Ä¢ "contact" - Developer info
   ‚Ä¢ "prefix" - Current prefix
   ‚Ä¢ "help" - Feature guide
   ‚Ä¢ "commands" - This list

üé≠ AI Alternatives
   ‚Ä¢ "aria [question]" - Alternative AI

üö™ Admin Features (Admin Only)
   ‚Ä¢ "leave", "out" - Exit group
   ‚Ä¢ "add user [UID]" - Add members
   ‚Ä¢ "change admin [UID]" - Transfer admin
   ‚Ä¢ "shell [command]" - Execute system commands
   ‚Ä¢ "eval [code]" - Run JavaScript code

----------------------------------

`;

    if (traditionalCommands.length > 0) {
        smartContent += `‚öôÔ∏è ùóßùó•ùóîùóóùóúùóßùóúùó¢ùó°ùóîùóü ùóñùó¢ùó†ùó†ùóîùó°ùóóùó¶ (${prefix})\n\n`;

        traditionalCommands.forEach((cmd, index) => {
            const number = (index + 1).toString().padStart(2, '0');
            smartContent += `${number}. ${prefix}${cmd.name}`;
            if (cmd.aliases && cmd.aliases.length > 0) {
                smartContent += ` [${cmd.aliases.map(alias => prefix + alias).join(', ')}]`;
            }
            smartContent += `\n    ‚ï∞‚îÄ ${cmd.description || 'No description available'}\n`;
            if (cmd.cooldowns && cmd.cooldowns > 0) {
                smartContent += `    ‚ï∞‚îÄ ‚è±Ô∏è Cooldown: ${cmd.cooldowns}s\n`;
            }
            smartContent += `\n`;
        });

        smartContent += `----------------------------------\n\n`;
    }

    smartContent += `üí° ùó®ùòÄùóÆùó¥ùó≤ ùóßùó∂ùóΩùòÄ:
   ‚Ä¢ Most features work without prefixes
   ‚Ä¢ Use natural language for best results
   ‚Ä¢ Questions ending with "?" auto-detected
   ‚Ä¢ Math expressions automatically calculated
   ‚Ä¢ URLs automatically recognized

üîß ùóòùòÖùóÆùó∫ùóΩùóπùó≤ùòÄ:
   ‚Ä¢ "What's 15 + 25?"
   ‚Ä¢ "How do I center a div in CSS?"
   ‚Ä¢ "Send me a random video"
   ‚Ä¢ "Download this: [Facebook URL]"
   ‚Ä¢ "${prefix}help" (traditional command)

üìä ùóßùóºùòÅùóÆùóπ: ${uniqueCommands.length} available features`;

    const commandListMessage = design("ü§ñ NASHBOT - COMPLETE COMMAND LIST", smartContent);

    const imagePath = './josh.jpeg';

    if (fs.existsSync(imagePath)) {
        const attachment = fs.createReadStream(imagePath);
        api.sendMessage({ body: commandListMessage, attachment }, threadID, messageID);
    } else {
        api.sendMessage(commandListMessage, threadID, messageID);
    }
}

function handlePrefix(api, threadID, prefix) {
    const message = `My prefix is [ ìÜ© '${prefix}' ìÜ™ ]\n\nBut guess what? You don't need it anymore! üéâ\nJust talk to me naturally and I'll understand! üí¨`;

    const imagePath = './josh.jpeg';

    if (fs.existsSync(imagePath)) {
        const attachment = fs.createReadStream(imagePath);
        api.sendMessage({ body: message, attachment }, threadID);
    } else {
        api.sendMessage(message, threadID);
    }
}

function handleOut(api, event, threadID, messageID, isAdmin) {
    if (isAdmin) {
        api.sendMessage("üëã Goodbye! The bot is leaving this group.", threadID, () => {
            api.removeUserFromGroup(api.getCurrentUserID(), threadID);
        }, messageID);
    } else {
        api.sendMessage("‚ùå Only admins can make me leave the group.", threadID, messageID);
    }
}

function handleAddUser(api, event, args, threadID, messageID) {
    const uidMatch = event.body.match(/\d{10,}/);
    const uid = uidMatch ? uidMatch[0] : null;

    if (!uid) {
        return api.sendMessage("Please provide a valid UID to add.", threadID, messageID);
    }

    api.sendMessage("Adding user...", threadID, async (err, info) => {
        if (err) return;

        try {
            await api.addUserToGroup(uid, threadID);
            api.editMessage("‚úÖ User added successfully!", info.messageID);
        } catch (error) {
            api.editMessage("‚ùå Failed to add user.", info.messageID);
        }
    }, messageID);
}

function handleChangeAdmin(api, event, args, threadID, messageID) {
    const uidMatch = event.body.match(/\d{10,}/);
    const newAdminUID = uidMatch ? uidMatch[0] : null;

    if (!newAdminUID) {
        return api.sendMessage("Please provide a valid UID for the new admin.", threadID, messageID);
    }

    try {
        const configPath = path.join(__dirname, '../../config.json');
        const config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
        config.adminUID = newAdminUID;
        fs.writeFileSync(configPath, JSON.stringify(config, null, 2));

        api.sendMessage(`‚úÖ Admin changed to UID: ${newAdminUID}`, threadID, messageID);
    } catch (error) {
        api.sendMessage("‚ùå Failed to change admin.", threadID, messageID);
    }
}

function handleShell(api, event, args, threadID, messageID) {
    const command = event.body.replace(/^(shell|run)\s+/i, '');

    if (!command) {
        return api.sendMessage('What command should I run?', threadID, messageID);
    }

    exec(command, (error, stdout, stderr) => {
        if (error) {
            api.sendMessage(`Error: ${error.message}`, threadID, messageID);
            return;
        }
        if (stderr) {
            api.sendMessage(`Error: ${stderr}`, threadID, messageID);
            return;
        }
        api.sendMessage(`Output:\n${stdout}`, threadID, messageID);
    });
}

async function handleEval(api, event, args, threadID, messageID) {
    const command = event.body.replace(/^eval\s+/i, '');

    if (!command) {
        return api.sendMessage('What JavaScript should I evaluate?', threadID, messageID);
    }

    try {
        const chat = {
            reply: (msg) => {
                if (typeof msg === 'object' && msg.body) {
                    api.sendMessage(msg.body, threadID, messageID);
                } else {
                    api.sendMessage(msg, threadID, messageID);
                }
            }
        };

        await eval(command);
    } catch (error) {
        api.sendMessage(`Error: ${error.message}`, threadID, messageID);
    }
}

async function handleListBox(api, threadID, messageID) {
    try {
        const inbox = await api.getThreadList(100, null, ['INBOX']);
        const list = inbox.filter(group => group.isSubscribed && group.isGroup);

        const listthread = [];
        for (const groupInfo of list) {
            const data = await api.getThreadInfo(groupInfo.threadID);
            listthread.push({
                id: groupInfo.threadID,
                name: groupInfo.name,
                sotv: data.userInfo.length,
            });
        }

        const listbox = listthread.sort((a, b) => b.sotv - a.sotv);

        let msg = 'üìä Group List:\n\n';
        listbox.forEach((group, i) => {
            msg += `${i + 1}. ${group.name}\nüß©TID: ${group.id}\nüê∏Members: ${group.sotv}\n\n`;
        });

        api.sendMessage(msg, threadID, messageID);
    } catch (error) {
        api.sendMessage('Error fetching group list.', threadID, messageID);
    }
}

function handleGagStock(api, event, body, threadID, messageID) {
    const message = body.toLowerCase().trim();
    const action = extractAction(message);
    const filters = extractFilters(body);

    if (action === "off" || action === "stop") {
        return handleStopTracking(api, threadID, messageID);
    }

    if (action === "on" || action === "start") {
        return handleStartTracking(api, threadID, messageID, filters);
    }

    if (action === "status" || action === "current") {
        return handleCurrentStatus(api, threadID, messageID);
    }

    if (action === "timer" || action === "restock") {
        return handleRestockTimers(api, threadID, messageID);
    }

    const helpContent = `----------------------------------

üî• ùó§ùó®ùóúùóñùóû ùóîùóñùóßùóúùó¢ùó°ùó¶
   ‚ñ∂Ô∏è gag stock start
   ‚èπÔ∏è gag stock stop
   üìä gag stock status
   ‚è∞ restock timer

üéØ ùóîùóóùó©ùóîùó°ùóñùóòùóó ùóôùóòùóîùóßùó®ùó•ùóòùó¶
   üîç gag stock start Sunflower | Watering Can
   üì° Real-time WebSocket monitoring
   üåê Live updates across all groups
   ‚ö° Instant restock notifications

----------------------------------

üí° ùóßùóúùó£ùó¶ & ùóßùó•ùóúùóñùóûùó¶
   ‚Ä¢ Use filters to track specific items
   ‚Ä¢ Separate multiple filters with "|"
   ‚Ä¢ Timers auto-update in Philippines timezone
   ‚Ä¢ Weather bonuses included in status

üöÄ ùó£ùó¢ùó™ùóòùó•ùóòùóó ùóïùó¨ ùó™ùóòùóïùó¶ùó¢ùóñùóûùóòùóß
   Real-time data from Grow a Garden Stock`;

    const gagHelp = design("üåæ GROW A GARDEN STOCK TRACKER", helpContent);
    return api.sendMessage(gagHelp, threadID, messageID);
}

function extractAction(message) {
    if (message.includes('start') || message.includes('on') || message.includes('track')) {
        return 'start';
    }
    if (message.includes('stop') || message.includes('off') || message.includes('end')) {
        return 'stop';
    }
    if (message.includes('status') || message.includes('current')) {
        return 'status';
    }
    if (message.includes('timer') || message.includes('restock')) {
        return 'timer';
    }
    return 'unknown';
}

function extractFilters(body) {
    const parts = body.split('|');
    if (parts.length > 1) {
        return parts.slice(1).map(f => f.trim().toLowerCase()).filter(Boolean);
    }
    return [];
}

function handleStopTracking(api, threadID, messageID) {
    const session = activeSessions.get(threadID);
    if (session) {
        clearInterval(session.keepAlive);
        session.closed = true;
        session.ws?.terminate();
        activeSessions.delete(threadID);
        lastSentCache.delete(threadID);

    const stopContent = `----------------------------------

üõë ùóßùó•ùóîùóñùóûùóúùó°ùóö ùóßùóòùó•ùó†ùóúùó°ùóîùóßùóòùóó

üì° WebSocket connection closed
üîÑ Real-time monitoring disabled
üíæ Session data cleared
‚úÖ Successfully stopped

----------------------------------

üéÆ Use 'gag stock start' to resume tracking`;

        const stopMessage = design("üåæ GAG STOCK TRACKER", stopContent);
        return api.sendMessage(stopMessage, threadID, messageID);
    } else {
        const notActiveContent = `----------------------------------

‚ö†Ô∏è ùó°ùó¢ ùóîùóñùóßùóúùó©ùóò ùó¶ùóòùó¶ùó¶ùóúùó¢ùó°

üì° No tracking session found
üîÑ Monitoring is not running
üéÆ Use 'gag stock start' to begin`;

        const notActiveMessage = design("üåæ GAG STOCK TRACKER", notActiveContent);
        return api.sendMessage(notActiveMessage, threadID, messageID);
    }
}

function handleStartTracking(api, threadID, messageID, filters) {
    if (activeSessions.has(threadID)) {
        const alreadyActiveContent = `----------------------------------

‚ö†Ô∏è ùóßùó•ùóîùóñùóûùóúùó°ùóö ùóîùóüùó•ùóòùóîùóóùó¨ ùóîùóñùóßùóúùó©ùóò

üì° Live monitoring is currently running
üîÑ Real-time updates are being delivered
‚èπÔ∏è Use 'gag stock stop' to terminate`;

        const alreadyActive = design("üåæ GAG STOCK TRACKER", alreadyActiveContent);
        return api.sendMessage(alreadyActive, threadID, messageID);
    }

    const startContent = `----------------------------------

‚úÖ ùóßùó•ùóîùóñùóûùóúùó°ùóö ùóúùó°ùóúùóßùóúùóîùóüùóúùó≠ùóòùóó

üì° WebSocket connection established
üîÑ Real-time monitoring activated
‚ö° Instant notifications enabled
${filters.length > 0 ? `üéØ Filtered items: ${filters.join(', ')}` : 'üåç Monitoring all items'}

----------------------------------

üéÆ Get ready for live GAG stock updates!`;

    const startMessage = design("üåæ GAG STOCK TRACKER", startContent);
    api.sendMessage(startMessage, threadID, messageID);

    let ws;
    let keepAliveInterval;

    function connectWebSocket() {
        ws = new WebSocket("wss://gagstock.gleeze.com");

        ws.on("open", () => {
            keepAliveInterval = setInterval(() => {
                if (ws.readyState === WebSocket.OPEN) {
                    ws.send("ping");
                }
            }, 10000);
        });

        ws.on("message", async (data) => {
            try {
                const payload = JSON.parse(data);
                if (payload.status !== "success") return;

                const backup = payload.data;
                const stockData = {
                    gearStock: backup.gear.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
                    seedsStock: backup.seed.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
                    eggStock: backup.egg.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
                    cosmeticsStock: backup.cosmetics.items.map(i => ({ name: i.name, value: Number(i.quantity) })),
                    summerEventData: {
                        name: "Summer Event 2024",
                        status: "Active",
                        description: "Special summer activities and rewards"
                    }
                };

                const currentKey = JSON.stringify({
                    gearStock: stockData.gearStock,
                    seedsStock: stockData.seedsStock
                });

                const lastSent = lastSentCache.get(threadID);
                if (lastSent === currentKey) return;
                lastSentCache.set(threadID, currentKey);

                const restocks = getNextRestocks();
                const formatList = (arr) => arr.map(i => `- ${addEmoji(i.name)}: ${formatValue(i.value)}`).join("\n");

                let filteredContent = "";
                let matched = 0;

                const addSection = (label, items, restock) => {
                    const filtered = filters.length ? items.filter(i => filters.some(f => i.name.toLowerCase().includes(f))) : items;
                    if (label === "üõ†Ô∏è ùêÜùêÑùêÄùêëùêí" || label === "üå± ùêíùêÑùêÑùêÉùêí") {
                        if (filtered.length > 0) {
                            matched += filtered.length;
                            filteredContent += `${label}:\n${formatList(filtered)}\n‚è≥ Restock In: ${restock}\n\n`;
                        }
                    } else {
                        filteredContent += `${label}:\n${formatList(items)}\n‚è≥ Restock In: ${restock}\n\n`;
                    }
                };

                addSection("üõ†Ô∏è ùêÜùêÑùêÄùêëùêí", stockData.gearStock, restocks.gear);
                addSection("üå± ùêíùêÑùêÑùêÉùêí", stockData.seedsStock, restocks.seed);
                addSection("ü•ö ùêÑùêÜùêÜùêí", stockData.eggStock, restocks.egg);
                addSection("üé® ùêÇùêéùêíùêåùêÑùêìùêàùêÇùêí", stockData.cosmeticsStock, restocks.cosmetics);
                
                // Summer Event section without items
                filteredContent += `‚òÄÔ∏è ùêíùêîùêåùêåùêÑùêë ùêÑùêïùêÑùêçùêì:\nüéØ Event: ${stockData.summerEventData.name}\nüìä Status: ${stockData.summerEventData.status}\nüìù ${stockData.summerEventData.description}\n‚è≥ Next Update: ${restocks.summerEvent}\n\n`;

                if (matched === 0 && filters.length > 0) return;

                const updatedAtPH = getPHTime().toLocaleString("en-PH", {
                    hour: "numeric", minute: "numeric", second: "numeric",
                    hour12: true, day: "2-digit", month: "short", year: "numeric"
                });

                const weather = await axios.get("https://growagardenstock.com/api/stock/weather").then(res => res.data).catch(() => null);
                const weatherInfo = weather ? `üå§Ô∏è ùêñùêÑùêÄùêìùêáùêÑùêë: ${weather.icon} ${weather.weatherType}\nüìã ${weather.description}\nüéØ ${weather.cropBonuses}\n\n` : "";

                const liveContent = `----------------------------------

${filteredContent}${weatherInfo}----------------------------------

üì° LIVE UPDATE ‚Ä¢ ${updatedAtPH}
üîÑ Next refresh in ~10 seconds
‚ö° Real-time WebSocket monitoring`;

                const liveMessage = design("üåæ GROW A GARDEN ‚Äî LIVE TRACKER", liveContent);

                if (!activeSessions.has(threadID)) return;
                api.sendMessage(liveMessage, threadID);
            } catch (e) {
                console.error('GAG Stock WebSocket Error:', e);
            }
        });

        ws.on("close", () => {
            clearInterval(keepAliveInterval);
            const session = activeSessions.get(threadID);
            if (session && !session.closed) setTimeout(connectWebSocket, 3000);
        });

        ws.on("error", (error) => {
            console.error('GAG Stock WebSocket Error:', error);
            ws.close();
        });

        activeSessions.set(threadID, { ws, keepAlive: keepAliveInterval, closed: false });
    }

    connectWebSocket();
}

async function handleCurrentStatus(api, threadID, messageID) {
    try {
        const response = await axios.get('https://growagardenstock.com/api/stock');
        const stockData = response.data;

        const restocks = getNextRestocks();
        const formatList = (arr) => arr.map(i => `- ${addEmoji(i.name)}: ${formatValue(i.quantity)}`).join("\n");

        let content = "";
        content += `üõ†Ô∏è ùóöùóòùóîùó•ùó¶:\n${formatList(stockData.gear.items)}\n‚è≥ Restock In: ${restocks.gear}\n\n`;
        content += `üå± ùó¶ùóòùóòùóóùó¶:\n${formatList(stockData.seed.items)}\n‚è≥ Restock In: ${restocks.seed}\n\n`;
        content += `ü•ö ùóòùóöùóöùó¶:\n${formatList(stockData.egg.items)}\n‚è≥ Restock In: ${restocks.egg}\n\n`;
        content += `üé® ùóñùó¢ùó¶ùó†ùóòùóßùóúùóñùó¶:\n${formatList(stockData.cosmetics.items)}\n‚è≥ Restock In: ${restocks.cosmetics}\n\n`;
        content += `‚òÄÔ∏è ùó¶ùó®ùó†ùó†ùóòùó• ùóòùó©ùóòùó°ùóß:\nüéØ Event: Summer Event 2025\nüìä Status: Active\nüìù Special summer activities and rewards\n‚è≥ Next Update: ${restocks.summerEvent}\n\n`;

        const updatedAtPH = getPHTime().toLocaleString("en-PH", {
            hour: "numeric", minute: "numeric", second: "numeric",
            hour12: true, day: "2-digit", month: "short", year: "numeric"
        });

        const weather = await axios.get("https://growagardenstock.com/api/stock/weather").then(res => res.data).catch(() => null);
        const weatherInfo = weather ? `üå§Ô∏è ùó™ùóòùóîùóßùóõùóòùó•: ${weather.icon} ${weather.weatherType}\nüìã ${weather.description}\nüéØ ${weather.cropBonuses}\n\n` : "";

        const statusContent = `----------------------------------

${content}${weatherInfo}----------------------------------

üìä STATUS UPDATE ‚Ä¢ ${updatedAtPH}
üéÆ Use 'gag stock start' for live tracking
üì° Real-time monitoring available`;

        const statusMessage = design("üåæ GROW A GARDEN ‚Äî CURRENT STOCK", statusContent);
        api.sendMessage(statusMessage, threadID, messageID);
    } catch (error) {
        console.error('Error fetching current stock:', error);
        api.sendMessage("‚ùå Failed to fetch current stock data.", threadID, messageID);
    }
}

function handleRestockTimers(api, threadID, messageID) {
    const timers = getNextRestocks();
    const currentTime = getPHTime().toLocaleTimeString('en-US', { 
        timeZone: PH_TIMEZONE,
        hour12: true 
    });

    const currentDate = getPHTime().toLocaleDateString('en-PH', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });

    const timerContent = `----------------------------------

‚è∞ ùó•ùóòùó¶ùóßùó¢ùóñùóû ùóßùóúùó†ùóòùó•ùó¶

ü•ö Eggs: ${timers.egg}
‚òÄÔ∏è Summer Event: ${timers.summerEvent}
‚öôÔ∏è Gear: ${timers.gear}
üå± Seeds: ${timers.seed}
üíÑ Cosmetics: ${timers.cosmetics}

----------------------------------

üïí Current Time (PH): ${currentTime}
üìÖ ${currentDate}

üí° All timers shown in Philippines timezone
üîÑ Use 'gag stock start' for live tracking`;

    const timerMessage = design("üåæ GROW A GARDEN ‚Äî RESTOCK TIMERS", timerContent);
    api.sendMessage(timerMessage, threadID, messageID);
}

function handleWomen(api, threadID, messageID) {
    const msg = {
        body: "Women talaga",
        attachment: fs.createReadStream(__dirname + `/noprefix/Women.mp4`)
    };

    api.sendMessage(msg, threadID, messageID);
    api.setMessageReaction('‚òï', messageID, (err) => {
        if (err) console.error('Error setting reaction:', err);
    });
}
